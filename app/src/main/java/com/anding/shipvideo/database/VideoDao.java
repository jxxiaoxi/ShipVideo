package com.anding.shipvideo.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.anding.shipvideo.data.Video;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VIDEO".
*/
public class VideoDao extends AbstractDao<Video, Void> {

    public static final String TABLENAME = "VIDEO";

    /**
     * Properties of entity Video.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Vid = new Property(0, String.class, "vid", false, "VID");
        public final static Property Vname = new Property(1, String.class, "vname", false, "VNAME");
        public final static Property Vpic = new Property(2, String.class, "vpic", false, "VPIC");
        public final static Property Vcategory = new Property(3, String.class, "vcategory", false, "VCATEGORY");
    }


    public VideoDao(DaoConfig config) {
        super(config);
    }
    
    public VideoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VIDEO\" (" + //
                "\"VID\" TEXT," + // 0: vid
                "\"VNAME\" TEXT," + // 1: vname
                "\"VPIC\" TEXT," + // 2: vpic
                "\"VCATEGORY\" TEXT);"); // 3: vcategory
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VIDEO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Video entity) {
        stmt.clearBindings();
 
        String vid = entity.getVid();
        if (vid != null) {
            stmt.bindString(1, vid);
        }
 
        String vname = entity.getVname();
        if (vname != null) {
            stmt.bindString(2, vname);
        }
 
        String vpic = entity.getVpic();
        if (vpic != null) {
            stmt.bindString(3, vpic);
        }
 
        String vcategory = entity.getVcategory();
        if (vcategory != null) {
            stmt.bindString(4, vcategory);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Video entity) {
        stmt.clearBindings();
 
        String vid = entity.getVid();
        if (vid != null) {
            stmt.bindString(1, vid);
        }
 
        String vname = entity.getVname();
        if (vname != null) {
            stmt.bindString(2, vname);
        }
 
        String vpic = entity.getVpic();
        if (vpic != null) {
            stmt.bindString(3, vpic);
        }
 
        String vcategory = entity.getVcategory();
        if (vcategory != null) {
            stmt.bindString(4, vcategory);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Video readEntity(Cursor cursor, int offset) {
        Video entity = new Video( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // vid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // vname
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // vpic
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // vcategory
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Video entity, int offset) {
        entity.setVid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setVname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setVpic(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setVcategory(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Video entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Video entity) {
        return null;
    }

    @Override
    public boolean hasKey(Video entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
